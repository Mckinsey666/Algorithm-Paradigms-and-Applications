#include "stdafx.h"
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <cmath>
#include <queue>
#include <functional>
using namespace std;

class board {
	friend vector<board> solve(const board&);
	friend ostream& operator<<(ostream&, board&);
public:
	board();
	~board();
	bool goal() const;
	int get_dist();
	int	dis() { return distance; }
	int get_moves() { return moves; }
private:
	bool operator==(const board&);
	board up();
	board down();
	board left();
	board right();
	void update();
	int distance;
	int moves;
	int _x;
	int _y;
	int b[3][3];
};

auto compare = [](board a, board b) {
	return a.get_dist() > b.get_dist();
};

board::board() {
	distance = 0;
	moves = 0;
	cout << "Enter board:\n";
	for (int i = 0; i < 3; ++i)
		for (int j = 0; j < 3; ++j){
				cin >> b[i][j];
				if (!b[i][j]) {
					_x = i; _y = j;
				}
			}
}

board::~board(){}
void board::update() {
	distance = 0;
	for (int i = 0; i < 3; ++i)
		for (int j = 0; j < 3; ++j) {
			//cout << b[i][j] << ": " << abs(i - (b[i][j] - 1) / 3) + abs(j - (b[i][j] - 1) % 3) << '\n';
			if (b[i][j])
				distance += abs(i - (b[i][j] - 1) / 3) + abs(j - (b[i][j] - 1) % 3);
		}
}
bool board::goal() const  {
	for (int i = 0; i < 3; ++i)
		for (int j = 0; j < 3; ++j)
			if (!(i == 2 && j == 2))
				if (!((3 * i + j) + 1 == b[i][j]))
					return false;
	return true;
}
bool board::operator==(const board& b2) {
	for (int i = 0; i < 3; ++i)
		for (int j = 0; j < 3; ++j)
			if (b[i] != b2.b[i])
				return false;
	return true;
}
board board::left() {
	board moved = *this;
	swap(moved.b[_x][_y], moved.b[_x][_y - 1]);
	moved._y--;
	moved.moves = moves + 1;
	moved.update();
	return moved;
}
board board::right() {
	board moved = *this;
	swap(moved.b[_x][_y], moved.b[_x][_y + 1]);
	moved._y++;
	moved.moves = moves + 1;
	moved.update();
	return moved;
}
board board::up() {
	board moved = *this;
	swap(moved.b[_x][_y], moved.b[_x - 1][_y]);
	moved._x--;
	moved.moves = moves + 1;
	moved.update();
	return moved;
}
board board::down() {
	board moved = *this;
	swap(moved.b[_x][_y], moved.b[_x + 1][_y]);
	moved._x++;
	moved.moves = moves + 1;
	moved.update();
	return moved;
}
int board::get_dist() {
	//cout << "dis: " << distance << ", moves: " << moves << '\n';
	return distance + moves;
}

vector<board> solve(const board& b) {
	vector<board> solution;
	priority_queue<board, vector<board>, decltype(compare)> solved(compare);
	
	return solution;
}
ostream& operator<<(ostream& out, board& b) {
	for (int i = 0; i < 3; ++i) {
		for (int j = 0; j < 3; ++j)
			out << b.b[i][j] << ' ';
		out << '\n';
	}
	return out;
}


int main()
{
	board b;
	vector<board>sol = solve(b);
	cout << "Solution:\n";
	cout << sol.size() << '\n';
	for (int i = 0; i < sol.size(); ++i)
		cout << sol[i] << '\n';
	return 0;
}


